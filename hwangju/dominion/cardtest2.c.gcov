        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://set NOISY_TEST to 0 to remove prinftf's from output
        -:    9:#define NOISY_TEST 1
        -:   10:
function main called 3 returned 100% blocks executed 79%
        3:   11:int main() {
        3:   12:    int p = 0;
        3:   13:    int handPos = 0;
        3:   14:    int seed = 1000;
        3:   15:    int numPlayer = 2;
        -:   16:    int hand_count, deck_count, player_turn;
        3:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:                 remodel, smithy, village, baron, great_hall};
        -:   19:    struct gameState G;
        -:   20:
        3:   21:    printf("\nTESTING Smithy Card\n");
call    0 returned 100%
        -:   22:
        -:   23:    //clear the game state
        3:   24:    memset(&G, 23, sizeof(struct gameState));
        -:   25:    //initialize a new game
        3:   26:    initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   27:
        3:   28:    hand_count = G.handCount[p];
        3:   29:    deck_count = G.deckCount[p];
        3:   30:    player_turn = G.whoseTurn;
        3:   31:    int estate_count = G.supplyCount[estate];
        3:   32:    int duchy_count = G.supplyCount[duchy];
        3:   33:    int province_count = G.supplyCount[province];
        3:   34:    int great_hall_count = G.supplyCount[great_hall];
        3:   35:    int gardens_count = G.supplyCount[gardens];
        -:   36:
        -:   37:    //play smithy card
        3:   38:    playSmithy(&G, handPos);
call    0 returned 100%
        -:   39:#if (NOISY_TEST == 1)
        -:   40:    //hand should have +2 cards
        3:   41:    if(G.handCount[p] == hand_count + 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   42:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   43:    else
    #####:   44:        printf("TEST FAILED\n");
call    0 never executed
        -:   45:    //deck should have -3 cards
        3:   46:    if(G.deckCount[p] == deck_count - 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   47:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   48:    else
    #####:   49:        printf("TEST FAILED\n");
call    0 never executed
        -:   50:    //player's turn should not change
        3:   51:    if(G.whoseTurn == player_turn)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   52:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   53:    else
    #####:   54:        printf("TEST FAILED\n");
call    0 never executed
        -:   55:    //victory cards should be unchanged
        3:   56:    if(G.supplyCount[estate] == estate_count && G.supplyCount[duchy] == duchy_count && G.supplyCount[province] == province_count)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        3:   57:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   58:    else
    #####:   59:        printf("TEST FAILED\n");
call    0 never executed
        -:   60:    //kingdom cards should be unchanged
        3:   61:    if(G.supplyCount[great_hall] == great_hall_count && G.supplyCount[gardens] == gardens_count)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        3:   62:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   63:    else
    #####:   64:        printf("TEST FAILED\n");
call    0 never executed
        -:   65:#endif
        -:   66:
        3:   67:    hand_count = G.handCount[p];
        3:   68:    deck_count = G.deckCount[p];
        3:   69:    player_turn = G.whoseTurn;
        -:   70:
        3:   71:    printf("All tests passed: Smithy Card\n");
call    0 returned 100%
        -:   72:
        3:   73:    return 0;
        -:   74:}

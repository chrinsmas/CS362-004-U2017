        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:// test gaincard
function main called 5 returned 100% blocks executed 48%
        5:   10:int main(int argc, char** argv)
        -:   11:{
        -:   12:    struct gameState game;
        -:   13:    int i;
        -:   14:    int retValue;
        5:   15:    int errorPresent = 0;
        -:   16:    int player;
        -:   17:    int card;
        -:   18:
        -:   19:    // fill all supply counts with 20 cards
      130:   20:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   21:    {
      125:   22:        game.supplyCount[i] = 20;
        -:   23:    }
        -:   24:
        -:   25:    // set supplyCount for the given card to 0 causing an error to be returned
        5:   26:    game.supplyCount[0] = 0;
        -:   27:
        5:   28:    retValue = gainCard(0, &game, 1, 1);
call    0 returned 100%
        -:   29:
        5:   30:    if(retValue == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   31:    {
    #####:   32:        printf("\nError in gainCard, supplied card was 0 and gainCard did not return -1\n");
call    0 never executed
    #####:   33:        errorPresent = 1;
        -:   34:    }
        -:   35:
        -:   36:    // set card to -1 this time
        5:   37:    game.supplyCount[0] = -1;
        -:   38:
        5:   39:    retValue = gainCard(0, &game, 1, 1);
call    0 returned 100%
        -:   40:
        5:   41:    if(retValue == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   42:    {
    #####:   43:        printf("\nError in gainCard, supplied card was -1 and gainCard did not return -1\n");
call    0 never executed
    #####:   44:        errorPresent = 1;
        -:   45:    }
        -:   46:
        5:   47:    game.supplyCount[0] = 20;
        -:   48:
        -:   49:    // check toFlag 1
        5:   50:    player = 1;
        5:   51:    card = 1;
        -:   52:
        5:   53:    game.deckCount[player] = 0;
        -:   54:
        5:   55:    retValue = gainCard(card, &game, 1, player);
call    0 returned 100%
        -:   56:
        -:   57:    // check no error returned
        5:   58:    if(retValue == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   59:    {
    #####:   60:        printf("\nError in gainCard toFlag1, error returned incorrectly \n");
call    0 never executed
    #####:   61:        errorPresent = 1;
        -:   62:    }
        -:   63:
        5:   64:    if(game.deck[player][0] != card)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   65:    {
    #####:   66:        printf("\nError in gainCard toFlag1, the position in the deck was not correctly set \n");
call    0 never executed
    #####:   67:        errorPresent = 1;
        -:   68:    }
        -:   69:
        5:   70:    if(game.supplyCount[card] != 19)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   71:    {
    #####:   72:        printf("\nError in gainCard toFlag1, the supply count of the provided card was not decremented properly \n");
call    0 never executed
    #####:   73:        errorPresent = 1;
        -:   74:    }
        -:   75:
        5:   76:    if(game.deckCount[player] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:    {
    #####:   78:        printf("\nError in gainCard toFlag1, the deck count of the provided player was not incremented properly \n");
call    0 never executed
    #####:   79:        errorPresent = 1;
        -:   80:    }
        -:   81:
        5:   82:    game.supplyCount[card] = 20;
        -:   83:
        -:   84:    // check toFlag2
        5:   85:    game.handCount[player] = 0;
        -:   86:
        5:   87:    retValue = gainCard(card, &game, 2, player);
call    0 returned 100%
        -:   88:
        -:   89:      // check no error returned
        5:   90:    if(retValue == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   91:    {
    #####:   92:        printf("\nError in gainCard toFlag2, error returned incorrectly \n");
call    0 never executed
    #####:   93:        errorPresent = 1;
        -:   94:    }
        -:   95:
        5:   96:    if(game.hand[player][0] != card)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   97:    {
    #####:   98:        printf("\nError in gainCard toFlag2, the position in the hand was not correctly set \n");
call    0 never executed
    #####:   99:        errorPresent = 1;
        -:  100:    }
        -:  101:
        5:  102:    if(game.supplyCount[card] != 19)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  103:    {
    #####:  104:        printf("\nError in gainCard toFlag2, the supply count of the provided card was not decremented properly \n");
call    0 never executed
    #####:  105:        errorPresent = 1;
        -:  106:    }
        -:  107:
        5:  108:    if(game.handCount[player] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  109:    {
    #####:  110:        printf("\nError in gainCard toFlag2, the hand count of the provided player was not incremented properly \n");
call    0 never executed
    #####:  111:        errorPresent = 1;
        -:  112:    }
        -:  113:
        5:  114:    game.supplyCount[card] = 20;
        -:  115:
        -:  116:    // check toFlag0
        5:  117:    game.discardCount[player] = 0;
        -:  118:
        5:  119:    retValue = gainCard(card, &game, 0, player);
call    0 returned 100%
        -:  120:
        -:  121:      // check no error returned
        5:  122:    if(retValue == -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  123:    {
    #####:  124:        printf("\nError in gainCard toFlag0, error returned incorrectly \n");
call    0 never executed
    #####:  125:        errorPresent = 1;
        -:  126:    }
        -:  127:
        5:  128:    if(game.discard[player][0] != card)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  129:    {
    #####:  130:        printf("\nError in gainCard toFlag0, the position in the discard was not correctly set \n");
call    0 never executed
    #####:  131:        errorPresent = 1;
        -:  132:    }
        -:  133:
        5:  134:    if(game.supplyCount[card] != 19)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  135:    {
    #####:  136:        printf("\nError in gainCard toFlag0, the supply count of the provided card was not decremented properly \n");
call    0 never executed
    #####:  137:        errorPresent = 1;
        -:  138:    }
        -:  139:
        5:  140:    if(game.discardCount[player] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  141:    {
    #####:  142:        printf("\nError in gainCard toFlag1, the deck count of the provided player was not incremented properly \n");
call    0 never executed
    #####:  143:        errorPresent = 1;
        -:  144:    }
        -:  145:
        5:  146:    if(errorPresent == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  147:    {
        5:  148:        printf("\nNo errors found in gainCard\n");
call    0 returned 100%
        -:  149:    }
        -:  150:
        5:  151:    return 0;
        -:  152:}

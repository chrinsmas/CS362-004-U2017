        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://set NOISY_TEST to 0 to remove prinftf's from output
        -:    9:#define NOISY_TEST 1
        -:   10:
function main called 5 returned 100% blocks executed 80%
        5:   11:int main() {
        5:   12:    int p = 0;
        5:   13:    int handPos = 0;
        5:   14:    int seed = 1000;
        5:   15:    int numPlayer = 2;
        -:   16:    int hand_count, action_count, player_turn;
        5:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:                 remodel, smithy, village, baron, great_hall};
        -:   19:    struct gameState G;
        -:   20:
        5:   21:    printf("\nTESTING Great Hall Card\n");
call    0 returned 100%
        -:   22:    //clear the game state
        5:   23:    memset(&G, 23, sizeof(struct gameState));
        -:   24:    //initialize a new game
        5:   25:    initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   26:
        5:   27:    hand_count = G.handCount[p];
        5:   28:    action_count = G.numActions;
        5:   29:    player_turn = G.whoseTurn;
        -:   30:
        -:   31:    //play village card
        5:   32:    playGreatHall(&G, handPos, p);
call    0 returned 100%
        -:   33:#if (NOISY_TEST == 1)
        -:   34:    //hand should have +1 cards
        5:   35:    if(G.handCount[p] == hand_count)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   36:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   37:    else
    #####:   38:        printf("TEST FAILED\n");
call    0 never executed
        -:   39:    //player should have +1 action cards
        5:   40:    if(G.numActions == action_count + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   41:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   42:    else
    #####:   43:        printf("TEST FAILED\n");
call    0 never executed
        -:   44:    //player's turn should not change
        5:   45:    if(G.whoseTurn == player_turn)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   46:        printf("TEST PASSED\n");
call    0 returned 100%
        -:   47:    else
    #####:   48:        printf("TEST FAILED\n");
call    0 never executed
        -:   49:#endif
        -:   50:
        5:   51:    hand_count = G.handCount[p];
        5:   52:    action_count = G.numActions;
        5:   53:    player_turn = G.whoseTurn;
        -:   54:
        5:   55:    printf("All tests passed: Great Hall Card\n");
call    0 returned 100%
        -:   56:
        5:   57:    return 0;
        -:   58:}

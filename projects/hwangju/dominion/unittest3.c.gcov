        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// test discardCard
function main called 5 returned 100% blocks executed 47%
        5:    9:int main(int argc, char** argv)
        -:   10:{
        -:   11:    struct gameState game;
        5:   12:    int errorPresent = 0;
        -:   13:    int player;
        -:   14:    int handPos;
        -:   15:
        5:   16:    player = 1;
        5:   17:    handPos = 1;
        5:   18:    game.playedCardCount = 0;
        -:   19:
        -:   20:    // check discarding last card in hand and that played card count doesn't get incremented incorrectly
        5:   21:    game.hand[player][handPos] = 1;
        5:   22:    game.handCount[player] = 2;
        -:   23:
        5:   24:    discardCard(handPos, player, &game, 0);
call    0 returned 100%
        -:   25:
        5:   26:    if(game.hand[player][handPos] != -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   27:    {
    #####:   28:        printf("\nError in discardCard, the card that was discarded was not set to played.\n");
call    0 never executed
    #####:   29:        errorPresent = 1;
        -:   30:    }
        -:   31:
        5:   32:    if(game.handCount[player] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   33:    {
    #####:   34:        printf("\nError in discardCard, the users hand count was not decremented when last card in hand is discarded. Note: not only card, last card position wise\n");
call    0 never executed
    #####:   35:        errorPresent = 1;
        -:   36:    }
        -:   37:
        5:   38:    if(game.playedCardCount != 01)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   39:    {
    #####:   40:        printf("\nError in discardCard, the played card count was incremented when a card should not have been trashed.\n");
call    0 never executed
    #####:   41:        errorPresent = 1;
        -:   42:    }
        -:   43:
        -:   44:    // check discarding only card in hand
        5:   45:    game.handCount[player] = 1;
        5:   46:    game.hand[player][handPos] = 1;
        -:   47:
        5:   48:    discardCard(handPos, player, &game, 0);
call    0 returned 100%
        -:   49:
        5:   50:    if(game.handCount[player] != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   51:    {
    #####:   52:        printf("\nError in discardCard, the users hand count was not decremented when only card in hand is discarded.\n");
call    0 never executed
    #####:   53:        errorPresent = 1;
        -:   54:    }
        -:   55:
        -:   56:    // check discarding middle card in hand with other cards surrounding it and trashing cards
        5:   57:    game.playedCardCount = 0;
        5:   58:    game.handCount[player] = 3;
        5:   59:    game.hand[player][handPos] = 1;
        5:   60:    game.hand[player][2] = 5; // set last card to unique value
        -:   61:
        5:   62:    discardCard(handPos, player, &game, 0);
call    0 returned 100%
        -:   63:
        5:   64:    if(game.handCount[player] != 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   65:    {
    #####:   66:        printf("\nError in discardCard, the users hand count was not decremented when a middle card in hand is discarded.\n");
call    0 never executed
    #####:   67:        errorPresent = 1;
        -:   68:    }
        -:   69:
        5:   70:    if(game.hand[player][handPos] != 5)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   71:    {
    #####:   72:        printf("\nError in discardCard, the value of the card in the discarded card's position was not updated to the value of the last card in the user's hand when a middle card in hand is discarded.\n");
call    0 never executed
    #####:   73:        errorPresent = 1;
        -:   74:    }
        -:   75:
        5:   76:    if(game.hand[player][2] != -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:    {
    #####:   78:        printf("\nError in discardCard, the value of the card in the last card's position was not set to played when a middle card in hand is discarded.\n");
call    0 never executed
    #####:   79:        errorPresent = 1;
        -:   80:    }
        -:   81:
        5:   82:    if(game.playedCards[0] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   83:    {
    #####:   84:        printf("\nError in discardCard, the correct card value was not added to the played cards pile when trashed.\n");
call    0 never executed
    #####:   85:        errorPresent = 1;
        -:   86:    }
        -:   87:
        5:   88:    if(game.playedCardCount != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   89:    {
    #####:   90:        printf("\nError in discardCard, the played card count was not incremented after a card should have been trashed.\n");
call    0 never executed
    #####:   91:        errorPresent = 1;
        -:   92:    }
        -:   93:
        5:   94:    if(errorPresent == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   95:    {
        5:   96:        printf("\nNo Errors found in discardCard\n");
call    0 returned 100%
        -:   97:    }
        -:   98:
        5:   99:    return 0;
        -:  100:}
